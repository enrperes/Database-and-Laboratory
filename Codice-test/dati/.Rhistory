devtools::install_github("max-alletsee/rstudio-themes")
install.packages("RpostgreSQL")
install.packages("RPostgreSQL")
setwd("~/Documents/UniUD/Basi di dati/LAB/Relazione/Codice/dati")
# Carica pacchetti
# install.packages("RPostgres")
library(DBI)
library(RPostgres)
# Connessione al database di default
con <- dbConnect(
RPostgres::Postgres(),
dbname = "postgres",
host = "localhost",
port = 5432,
user = "enrperes",
password = "9999"
)
# Crea il database
dbExecute(con, "CREATE DATABASE db_banca;")
# Chiudi la connessione
# Chiudi la connessione
dbDisconnect(con)
# Ora connettiti a db_banca
con <- dbConnect(
RPostgres::Postgres(),
dbname = "db_banca",
host = "localhost",
port = 5432,
user = "enrperes",
password = "9999"
)
# caricamento file .txt con i dati
v_nomi <- readLines("nomi.txt")
v_cognomi <- readLines("cognomi.txt")
v_ammontare_prestito <- readLines("ammontare_prestito.txt")
v_cf <- readLines("cf.txt")
v_data_assunzione <- readLines("data_assunzione.txt")
v_data_prestito <- readLines("data_prestito.txt")
v_data_nascita <- readLines("data_nascita.txt")
v_iban <- readLines("iban.txt")
v_interesse <- readLines("interesse.txt")
v_mensilità <- readLines("mensilità.txt")
v_residenza <- readLines("residenza.txt")
v_indirizzo <- readLines("indirizzo.txt")
v_saldo <- readLines("saldo.txt")
v_scoperto <- readLines("scoperto.txt")
v_telefono <- readLines("telefono.txt")
v_città <- readLines("città.txt")
# Leggi tutto il file SQL
query <- paste(readLines("tables.sql"), collapse = "\n")
# Carico lo schema tramite queries
queries <- unlist(strsplit(query, ";"))
queries <- trimws(queries)
queries <- queries[queries != ""]
for (q in queries) {
if (nchar(q) > 0) {
tryCatch({
dbExecute(con, q)
}, error = function(e2) {
message("Errore in query:\n", q, "\nMessaggio: ", e2$message)
})
}
}
# Leggi tutto il file SQL
query <- paste(readLines("triggers_dipendente_filiale.sql"), collapse = "\n")
---
# Function to split SQL script into queries without breaking $$ blocks
split_sql <- function(sql) {
queries <- c()
current <- ""
in_dollar <- FALSE
i <- 1
sql_length <- nchar(sql)
while (i <= sql_length) {
# Check if the next two characters are "$$" (and ensure we don't go out of bounds)
if (i <= sql_length - 1 && substr(sql, i, i + 1) == "$$") {
in_dollar <- !in_dollar
current <- paste0(current, "$$")
i <- i + 2
next
}
char <- substr(sql, i, i)
# Only split on semicolons when not inside a $$ block
if (char == ";" && !in_dollar) {
queries <- c(queries, current)
current <- ""
} else {
current <- paste0(current, char)
}
i <- i + 1
}
# Append any remaining SQL that didn't end with a semicolon
if (nchar(trimws(current)) > 0) {
queries <- c(queries, current)
}
return(queries)
}
---
# Function to split SQL script into queries without breaking $$ blocks
split_sql <- function(sql) {
queries <- c()
current <- ""
in_dollar <- FALSE
i <- 1
sql_length <- nchar(sql)
while (i <= sql_length) {
# Check if the next two characters are "$$" (and ensure we don't go out of bounds)
if (i <= sql_length - 1 && substr(sql, i, i + 1) == "$$") {
in_dollar <- !in_dollar
current <- paste0(current, "$$")
i <- i + 2
next
}
char <- substr(sql, i, i)
# Only split on semicolons when not inside a $$ block
if (char == ";" && !in_dollar) {
queries <- c(queries, current)
current <- ""
} else {
current <- paste0(current, char)
}
i <- i + 1
}
# Append any remaining SQL that didn't end with a semicolon
if (nchar(trimws(current)) > 0) {
queries <- c(queries, current)
}
return(queries)
}
---
# Function to split SQL script into queries without breaking $$ blocks
split_sql <- function(sql) {
queries <- c()
current <- ""
in_dollar <- FALSE
i <- 1
sql_length <- nchar(sql)
while (i <= sql_length) {
# Check if the next two characters are "$$" (and ensure we don't go out of bounds)
if (i <= sql_length - 1 && substr(sql, i, i + 1) == "$$") {
in_dollar <- !in_dollar
current <- paste0(current, "$$")
i <- i + 2
next
}
char <- substr(sql, i, i)
# Only split on semicolons when not inside a $$ block
if (char == ";" && !in_dollar) {
queries <- c(queries, current)
current <- ""
} else {
current <- paste0(current, char)
}
i <- i + 1
}
# Append any remaining SQL that didn't end with a semicolon
if (nchar(trimws(current)) > 0) {
queries <- c(queries, current)
}
return(queries)
}
# Read the entire SQL file into one string
sql <- paste(readLines("triggers_dipendente_filiale.sql"), collapse = "\n")
# Split the file into separate queries using the custom split_sql function
queries <- split_sql(sql)
queries <- trimws(queries)
queries <- queries[queries != ""]
# Execute each query safely, reporting errors without aborting the session
for (q in queries) {
tryCatch({
dbExecute(con, q)
}, error = function(e2) {
message("Errore in query:\n", q, "\nMessaggio: ", e2$message)
})
}
---
# Function to split SQL script into queries without breaking $$ blocks
split_sql <- function(sql) {
queries <- c()
current <- ""
in_dollar <- FALSE
i <- 1
sql_length <- nchar(sql)
while (i <= sql_length) {
# Check if the next two characters are "$$" (and ensure we don't go out of bounds)
if (i <= sql_length - 1 && substr(sql, i, i + 1) == "$$") {
in_dollar <- !in_dollar
current <- paste0(current, "$$")
i <- i + 2
next
}
char <- substr(sql, i, i)
# Only split on semicolons when not inside a $$ block
if (char == ";" && !in_dollar) {
queries <- c(queries, current)
current <- ""
} else {
current <- paste0(current, char)
}
i <- i + 1
}
# Append any remaining SQL that didn't end with a semicolon
if (nchar(trimws(current)) > 0) {
queries <- c(queries, current)
}
return(queries)
}
---
# Define the split_sql function
split_sql <- function(sql) {
queries <- c()
current <- ""
in_dollar <- FALSE
i <- 1
sql_length <- nchar(sql)
while (i <= sql_length) {
# Toggle the in_dollar flag when encountering "$$"
if (i <= sql_length - 1 && substr(sql, i, i + 1) == "$$") {
in_dollar <- !in_dollar
current <- paste0(current, "$$")
i <- i + 2
next
}
char <- substr(sql, i, i)
# Split on semicolon only if not inside a $$ block
if (char == ";" && !in_dollar) {
queries <- c(queries, current)
current <- ""
} else {
current <- paste0(current, char)
}
i <- i + 1
}
# Append any remaining SQL not terminated by a semicolon
if (nchar(trimws(current)) > 0) {
queries <- c(queries, current)
}
return(queries)
}
---
# Define the split_sql function
split_sql <- function(sql) {
queries <- c()
current <- ""
in_dollar <- FALSE
i <- 1
sql_length <- nchar(sql)
while (i <= sql_length) {
# Toggle the in_dollar flag when encountering "$$"
if (i <= sql_length - 1 && substr(sql, i, i + 1) == "$$") {
in_dollar <- !in_dollar
current <- paste0(current, "$$")
i <- i + 2
next
}
char <- substr(sql, i, i)
# Split on semicolon only if not inside a $$ block
if (char == ";" && !in_dollar) {
queries <- c(queries, current)
current <- ""
} else {
current <- paste0(current, char)
}
i <- i + 1
}
# Append any remaining SQL not terminated by a semicolon
if (nchar(trimws(current)) > 0) {
queries <- c(queries, current)
}
return(queries)
}
# Define the split_sql function
split_sql <- function(sql) {
queries <- c()
current <- ""
in_dollar <- FALSE
i <- 1
sql_length <- nchar(sql)
while (i <= sql_length) {
# Toggle the in_dollar flag when encountering "$$"
if (i <= sql_length - 1 && substr(sql, i, i + 1) == "$$") {
in_dollar <- !in_dollar
current <- paste0(current, "$$")
i <- i + 2
next
}
char <- substr(sql, i, i)
# Split on semicolon only if not inside a $$ block
if (char == ";" && !in_dollar) {
queries <- c(queries, current)
current <- ""
} else {
current <- paste0(current, char)
}
i <- i + 1
}
# Append any remaining SQL not terminated by a semicolon
if (nchar(trimws(current)) > 0) {
queries <- c(queries, current)
}
return(queries)
}
# Read the entire SQL file into one string
sql <- paste(readLines("triggers_dipendente_filiale.sql"), collapse = "\n")
# Use the split_sql function to split the file into individual queries
queries <- split_sql(sql)
queries <- trimws(queries)
queries <- queries[queries != ""]
# Execute each query with error handling
for (q in queries) {
tryCatch({
dbExecute(con, q)
}, error = function(e2) {
message("Error in query:\n", q, "\nMessage: ", e2$message)
})
}
