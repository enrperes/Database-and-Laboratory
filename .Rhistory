SELECT attivi
FROM filiale
WHERE nome = '", filiale_test, "';
"))
cat("Attivi filiale PRIMA: ", filiale_old$attivi[1], "\n")
tryCatch({
dbExecute(con, paste0("
UPDATE possiede
SET tipo_operazione = 'versamento', importo_operazione = 500
WHERE conto = '", iban_test, "'
AND tipo_operazione = 'apertura';
"))
}, error = function(e) {
cat("Errore sul versamento test: ", e$message, "\n")
})
nuovo_saldo <- dbGetQuery(con, paste0("
SELECT saldo
FROM conto
WHERE iban = '", iban_test, "';
"))
filiale_new <- dbGetQuery(con, paste0("
SELECT attivi
FROM filiale
WHERE nome = '", filiale_test, "';
"))
cat("Saldo conto DOPO:    ", nuovo_saldo$saldo[1], "\n")
cat("Attivi filiale DOPO: ", filiale_new$attivi[1], "\n")
cat("Variazione attivi:   ", filiale_new$attivi[1] - filiale_old$attivi[1], "\n")
} else {
cat("Nessun conto trovato per il test di aggiorna attivi filiale.\n")
}
cat("\n=== Test X4: IBAN duplicato tra contocorrente e contorisparmio ===\n")
tryCatch({
dbBegin(con)
# 1) Inserisco l'IBAN in 'conto' (necessario per rispettare la foreign key)
dbExecute(con, "
INSERT INTO conto (iban, saldo, filiale)
VALUES ('IT_TEST_DUPL_IBAN', 0, '1');
")
# 2) Inserisco in contocorrente
dbExecute(con, "
INSERT INTO contocorrente (iban, scoperto)
VALUES ('IT_TEST_DUPL_IBAN', 9999);
")
# 3) Provo a inserirlo anche in contorisparmio
dbExecute(con, "
INSERT INTO contorisparmio (iban, tasso_interesse)
VALUES ('IT_TEST_DUPL_IBAN', 2.0);
")
dbCommit(con)
cat("Inserimento duplicato riuscito: i trigger non hanno bloccato l'IBAN!\n")
}, error = function(e) {
dbRollback(con)
cat("Errore atteso (IBAN duplicato): ", e$message, "\n")
})
cat("\n=== Test Inserimento nuovo conto risparmio con transazione ===\n")
iban_nuovo   <- "IT_TEST_CONTO_RISP_01"
filiale_nuovo <- "3"
id_cliente   <- 12345
ok           <- FALSE
dbBegin(con)
tryCatch({
# 1) Inserisci il nuovo conto in 'conto'
query_conto <- paste0("
INSERT INTO conto (iban, saldo, filiale)
VALUES ('", iban_nuovo, "', 1000, '", filiale_nuovo, "');
")
dbExecute(con, query_conto)
# 2) Inserisci in 'contorisparmio' (se fosse conto corrente, lo faresti in 'contocorrente')
query_risp <- paste0("
INSERT INTO contorisparmio (iban, tasso_interesse)
VALUES ('", iban_nuovo, "', 1.5);
")
dbExecute(con, query_risp)
# 3) Collega il conto al cliente in 'possiede'
query_possiede <- paste0("
INSERT INTO possiede (cliente, conto, tipo_operazione, data_operazione)
VALUES (", id_cliente, ", '", iban_nuovo, "', 'apertura', CURRENT_DATE);
")
dbExecute(con, query_possiede)
# Se tutti gli insert vanno a buon fine, andiamo a commit
ok <- TRUE
}, error = function(e) {
cat("Errore durante l'inserimento del nuovo conto risparmio: ", e$message, "\n")
})
if(ok) {
dbCommit(con)
cat("Transazione completata con successo!\n")
} else {
dbRollback(con)
cat("Transazione annullata: non tutte le operazioni sono riuscite.\n")
}
# Verifica finale
conto_inserito <- dbGetQuery(con, paste0("SELECT * FROM conto WHERE iban = '", iban_nuovo, "';"))
print(conto_inserito)
risp_inserito <- dbGetQuery(con, paste0("SELECT * FROM contorisparmio WHERE iban = '", iban_nuovo, "';"))
print(risp_inserito)
possiede_inserito <- dbGetQuery(con, paste0("SELECT * FROM possiede WHERE conto = '", iban_nuovo, "';"))
print(possiede_inserito)
### Test 6: Inserimento di un gestore in un cliente ----
cat("\n=== Test Inserimento di un gestore in un cliente ===\n")
cliente_mio <- 29999
gestore_ok <- dbGetQuery(con, "SELECT gestore FROM cliente WHERE id=5999")
gestore_sbagliato <- dbGetQuery(con, "SELECT gestore FROM cliente WHERE id=6001")
dbExecute(con, paste0("
UPDATE cliente
SET gestore = '",gestore_sbagliato,"'
WHERE id = 29999;
"))
dbExecute(con, paste0("
UPDATE cliente
SET gestore = '",gestore_ok,"'
WHERE id = 29999;
"))
result <- dbGetQuery(con, "SELECT * FROM cliente WHERE id = 29999")
print(result)
## 1. Numero medio di rate dei prestiti associati a conti nelle filiali di Udine ----
media_rate_udine <- dbGetQuery(con, "
SELECT AVG(mensilità) AS media_rate
FROM prestito, conto, filiale
WHERE prestito.conto = conto.iban
AND conto.filiale = filiale.nome
AND filiale.città = 'Udine';
")
print(media_rate_udine)
## 2. Clienti con solo conti risparmio in filiali con 30–32 dipendenti ----
dbExecute(con, "
CREATE OR REPLACE VIEW filiali_3032 AS
SELECT filiale, COUNT(*) AS n_dip
FROM dipendente
GROUP BY filiale
HAVING COUNT(*) BETWEEN 30 AND 32;
")
clienti_risparmio <- dbGetQuery(con, "
SELECT cliente.id
FROM cliente, possiede, conto, filiali_3032
WHERE cliente.id = possiede.cliente
AND possiede.conto = conto.iban
AND conto.filiale = filiali_3032.filiale
AND NOT EXISTS (
SELECT 1
FROM contocorrente
WHERE contocorrente.iban = conto.iban
);
")
print(head(clienti_risparmio, 10))  # Stampa solo le prime 10 righe
## 3. Capi che gestiscono almeno 3 clienti ricchi (con oltre 100k euro nei conti) ----
dbExecute(con, "
CREATE OR REPLACE VIEW clienti_ricchi AS
SELECT cliente.id, SUM(conto.saldo) AS soldi, cliente.gestore
FROM cliente, possiede, conto
WHERE cliente.id = possiede.cliente
AND conto.iban = possiede.conto
GROUP BY cliente.id, cliente.gestore
HAVING SUM(conto.saldo) > 100000;
")
capi <- dbGetQuery(con, "
SELECT DISTINCT capo
FROM dipendente
WHERE EXISTS (
SELECT *
FROM clienti_ricchi c1, clienti_ricchi c2, clienti_ricchi c3
WHERE c1.gestore = dipendente.id
AND c2.gestore = dipendente.id
AND c3.gestore = dipendente.id
AND c1.id < c2.id AND c2.id < c3.id
);
")
print(capi)
## 4. Dipendenti (non capi) che gestiscono due clienti: uno con solo conti correnti, uno con solo conti risparmio ----
dbExecute(con, "
CREATE OR REPLACE VIEW clienti_correnti AS
SELECT possiede.cliente, cliente.gestore
FROM possiede, cliente
WHERE possiede.cliente = cliente.id
AND NOT EXISTS (
SELECT 1
FROM contorisparmio
WHERE contorisparmio.iban = possiede.conto
);
")
dbExecute(con, "
CREATE OR REPLACE VIEW clienti_risparmio AS
SELECT possiede.cliente, cliente.gestore
FROM possiede, cliente
WHERE possiede.cliente = cliente.id
AND NOT EXISTS (
SELECT 1
FROM contocorrente
WHERE contocorrente.iban = possiede.conto
);
")
dipendenti <- dbGetQuery(con, "
SELECT id
FROM dipendente
WHERE capo <> id
AND EXISTS (
SELECT *
FROM clienti_correnti cc1
WHERE cc1.gestore = dipendente.id
AND NOT EXISTS (
SELECT *
FROM clienti_correnti cc2
WHERE cc2.gestore = dipendente.id
AND cc1.cliente <> cc2.cliente
)
)
AND EXISTS (
SELECT *
FROM clienti_risparmio cr1
WHERE cr1.gestore = dipendente.id
AND NOT EXISTS (
SELECT *
FROM clienti_risparmio cr2
WHERE cr2.gestore = dipendente.id
AND cr1.cliente <> cr2.cliente
)
);
")
print(dipendenti)
## 5. Cliente con il prestito più alto nella filiale di Roma non gestito da un dipendente con meno di 3 anni di esperienza ----
data_limite <- Sys.Date() - (365 * 3)
dbExecute(con, paste0("
CREATE OR REPLACE VIEW clienti_gestiti_3 AS
SELECT cliente.id
FROM cliente, dipendente
WHERE cliente.gestore = dipendente.id
AND dipendente.data_assunzione < DATE '", data_limite, "';
"))
dbExecute(con, "
CREATE OR REPLACE VIEW candidati AS
SELECT cliente.id, prestito.ammontare
FROM cliente, clienti_gestiti_3, possiede, prestito, conto, filiale
WHERE cliente.id = clienti_gestiti_3.id
AND cliente.id = possiede.cliente
AND possiede.conto = prestito.conto
AND prestito.conto = conto.iban
AND conto.filiale = filiale.nome
AND filiale.città = 'Roma';
")
cliente_top <- dbGetQuery(con, "
SELECT id, ammontare
FROM candidati c1
WHERE NOT EXISTS (
SELECT 1
FROM candidati c2
WHERE c2.ammontare > c1.ammontare
);
")
print(cliente_top)
dbExecute(con, paste0("
CREATE OR REPLACE VIEW clienti_gestiti AS
SELECT cliente.id, cliente.gestore
FROM cliente, dipendente
WHERE cliente.gestore = dipendente.id;
"))
table <- dbGetQuery(con, paste0("
SELECT mensilità, COUNT(*)
FROM clienti_gestiti, possiede, conto, prestito
WHERE clienti_gestiti.id = possiede.cliente
AND possiede.conto = conto.iban
AND conto.saldo > 50.000
AND possiede.conto = prestito.conto
GROUP BY mensilità
"))
# 1. compute the counts without plotting
h <- hist(table$mensilità,
breaks = seq(0, 250, by = 10),
plot   = FALSE)
# 2. re‐draw with ylim set to max count + margin
hist(table$mensilità,
breaks = seq(0, 250, by = 10),
main   = "Distribuzione dei prestiti per mensilità",
xlab   = "Durata del prestito (mensilità)",
ylab   = "Numero di prestiti",
col    = "skyblue",
border = "white",
ylim   = c(0, max(h$counts) + 2))  # margine superiore di 2 unità
# Il numero di conti cointestati per filiale che hanno almeno un prestito associato.
dbExecute(con, paste0("
CREATE VIEW conti_cointestati AS
SELECT p1.conto, conto.filiale
FROM possiede AS p1, conto
WHERE p1.conto = conto.iban AND EXISTS (
SELECT *
FROM possiede AS p2
WHERE p1.conto = p2.conto AND p1.cliente < p2.cliente)
;"))
table <- dbGetQuery(con, paste0("
SELECT filiale, COUNT(*) AS n_conti
FROM conti_cointestati, prestito
WHERE conti_cointestati.conto = prestito.conto
AND ammontare > 50000
GROUP BY filiale
;"))
table$n_conti <- as.numeric(table$n_conti)
max_conti <- max(table$n_conti)
table$filiale_num <- as.integer(as.character(table$filiale))
# 1. riordina come fai già
table_ord <- table[order(table$filiale), ]
# 2. disegna il barplot salvando i centri delle barre
bar_centers <- barplot(table_ord$n_conti,
names.arg = table_ord$filiale,
main      = "Numero conti cointestati (con prestito) per filiale",
xlab      = "Filiale",
ylab      = "Numero conti",
col       = "skyblue",
border    = "white",
las       = 1,
ylim      = c(0, max(table_ord$n_conti)*1.15)
)
dbExecute(con, paste0("
CREATE OR REPLACE VIEW clienti_gestiti AS
SELECT cliente.id, cliente.gestore
FROM cliente, dipendente
WHERE cliente.gestore = dipendente.id;
"))
table <- dbGetQuery(con, paste0("
SELECT mensilità, COUNT(*)
FROM clienti_gestiti, possiede, conto, prestito
WHERE clienti_gestiti.id = possiede.cliente
AND possiede.conto = conto.iban
AND conto.saldo > 50.000
AND possiede.conto = prestito.conto
GROUP BY mensilità
"))
# 1. compute the counts without plotting
h <- hist(table$mensilità,
breaks = seq(0, 250, by = 10),
plot   = FALSE)
# 2. re‐draw with ylim set to max count + margin
hist(table$mensilità,
breaks = seq(0, 250, by = 10),
main   = "Distribuzione dei prestiti per mensilità",
xlab   = "Durata del prestito (mensilità)",
ylab   = "Numero di prestiti",
col    = "skyblue",
border = "white",
ylim   = c(0, max(h$counts) + 2))  # margine superiore di 2 unità
dbExecute(con, paste0("
CREATE OR REPLACE VIEW clienti_gestiti AS
SELECT cliente.id, cliente.gestore
FROM cliente, dipendente
WHERE cliente.gestore = dipendente.id;
"))
table <- dbGetQuery(con, paste0("
SELECT mensilità, COUNT(*)
FROM clienti_gestiti, possiede, conto, prestito
WHERE clienti_gestiti.id = possiede.cliente
AND possiede.conto = conto.iban
AND conto.saldo > 50000
AND possiede.conto = prestito.conto
GROUP BY mensilità
"))
# 1. compute the counts without plotting
h <- hist(table$mensilità,
breaks = seq(0, 250, by = 10),
plot   = FALSE)
# 2. re‐draw with ylim set to max count + margin
hist(table$mensilità,
breaks = seq(0, 250, by = 10),
main   = "Distribuzione dei prestiti per mensilità",
xlab   = "Durata del prestito (mensilità)",
ylab   = "Numero di prestiti",
col    = "skyblue",
border = "white",
ylim   = c(0, max(h$counts) + 2))  # margine superiore di 2 unità
dbExecute(con, paste0("
CREATE OR REPLACE VIEW dipendenti_gestori AS
SELECT dipendente.data_assunzione, dipendente.id
FROM cliente, dipendente
WHERE cliente.gestore = dipendente.id;
"))
dbExecute(con, paste0("
CREATE OR REPLACE VIEW clienti_gestiti AS
SELECT cliente.id, cliente.gestore
FROM cliente, dipendente
WHERE cliente.gestore = dipendente.id;
"))
table <- dbGetQuery(con, paste0("
SELECT mensilità, COUNT(*)
FROM clienti_gestiti, possiede, conto, prestito
WHERE clienti_gestiti.id = possiede.cliente
AND possiede.conto = conto.iban
AND conto.saldo > 50000
AND possiede.conto = prestito.conto
GROUP BY mensilità
"))
# 1. compute the counts without plotting
h <- hist(table$mensilità,
breaks = seq(0, 250, by = 10),
plot   = FALSE)
# 2. re‐draw with ylim set to max count + margin
hist(table$mensilità,
breaks = seq(0, 250, by = 10),
main   = "Distribuzione dei prestiti per mensilità",
xlab   = "Durata del prestito (mensilità)",
ylab   = "Numero di prestiti",
col    = "skyblue",
border = "white",
ylim   = c(0, max(h$counts) + 2))  # margine superiore di 2 unità
dbExecute(con, paste0("
CREATE OR REPLACE VIEW clienti_gestiti AS
SELECT cliente.id, cliente.gestore
FROM cliente, dipendente
WHERE cliente.gestore = dipendente.id;
"))
table <- dbGetQuery(con, paste0("
SELECT mensilità, COUNT(*)
FROM clienti_gestiti, possiede, conto, prestito
WHERE clienti_gestiti.id = possiede.cliente
AND possiede.conto = conto.iban
AND conto.saldo > 50000
AND possiede.conto = prestito.conto
GROUP BY mensilità
"))
# 1. compute the counts without plotting
h <- hist(table$mensilità,
breaks = seq(0, 250, by = 10),
plot   = FALSE)
# 2. re‐draw with ylim set to max count + margin
hist(table$mensilità,
breaks = seq(0, 250, by = 10),
main   = "Distribuzione dei prestiti per mensilità",
xlab   = "Durata del prestito (mensilità)",
ylab   = "Numero di prestiti",
col    = "skyblue",
border = "white",
ylim   = c(0, max(h$counts) + 2))  # margine superiore di 2 unità
dbExecute(con, paste0("
CREATE OR REPLACE VIEW dipendenti_gestori AS
SELECT dipendente.data_assunzione, dipendente.id
FROM cliente, dipendente
WHERE cliente.gestore = dipendente.id;
"))
table <- dbGetQuery(con, paste0("
SELECT SUM(conto.saldo) as skey, dipendenti_gestori.data_assunzione
FROM clienti_gestiti, possiede, conto, dipendenti_gestori
WHERE clienti_gestiti.id = possiede.cliente
AND possiede.conto = conto.iban
AND dipendenti_gestori.id = clienti_gestiti.gestore
GROUP BY dipendenti_gestori.data_assunzione
;
"))
table$data_assunzione <- as.Date(table$data_assunzione)
dates    <- table$data_assunzione
balances <- table$skey
plot(dates, balances,
type  = "p",
pch   = 16,
col   = "skyblue",
main  = "Totale Saldi Gestiti per Anzianità dei Gestori",
xlab  = "Data di Assunzione del Gestore",
ylab  = "Somma dei Saldi (€)",
yaxt  = "n",
cex   = 0.8)
y_breaks <- pretty(balances)
axis(2, at = y_breaks,
labels = format(y_breaks,
scientific = TRUE,
big.mark   = "."))
grid(nx = NA, ny = NULL,
col = "lightgray", lty = "dotted")
# Il numero di conti cointestati per filiale che hanno almeno un prestito associato.
dbExecute(con, paste0("
CREATE VIEW conti_cointestati AS
SELECT p1.conto, conto.filiale
FROM possiede AS p1, conto
WHERE p1.conto = conto.iban AND EXISTS (
SELECT *
FROM possiede AS p2
WHERE p1.conto = p2.conto AND p1.cliente < p2.cliente)
;"))
table <- dbGetQuery(con, paste0("
SELECT filiale, COUNT(*) AS n_conti
FROM conti_cointestati, prestito
WHERE conti_cointestati.conto = prestito.conto
AND ammontare > 50000
GROUP BY filiale
;"))
table$n_conti <- as.numeric(table$n_conti)
max_conti <- max(table$n_conti)
table$filiale_num <- as.integer(as.character(table$filiale))
# 1. riordina come fai già
table_ord <- table[order(table$filiale), ]
# 2. disegna il barplot salvando i centri delle barre
bar_centers <- barplot(table_ord$n_conti,
names.arg = table_ord$filiale,
main      = "Numero conti cointestati (con prestito) per filiale",
xlab      = "Filiale",
ylab      = "Numero conti",
col       = "skyblue",
border    = "white",
las       = 1,
ylim      = c(0, max(table_ord$n_conti)*1.15)
)
# 3. aggiungi le etichette esattamente sopra ogni barra
text(x      = bar_centers,
y      = table_ord$n_conti + max(table_ord$n_conti)*-0.02,  # piccolo offset
labels = table_ord$n_conti,
pos    = 3,      # 3 = sopra il punto (ignora y se usi pos)
cex    = 0.8,
col    = "black"
)
# 3. aggiungi le etichette esattamente sopra ogni barra
text(x      = bar_centers,
y      = table_ord$n_conti + max(table_ord$n_conti)*-0.02,  # piccolo offset
labels = table_ord$n_conti,
pos    = 3,      # 3 = sopra il punto (ignora y se usi pos)
cex    = 0.8,
col    = "black"
)
